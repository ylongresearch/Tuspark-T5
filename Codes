import tensorflow as tf
from tensorflow import keras

import numpy as np
import matplotlib.pyplot as plt

fashion_mnist = keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

print(train_images.shape)
print(test_images.shape)

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
               
plt.imshow(train_images[0])

train_images = train_images / 255.0
test_images = test_images / 255.0

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation=tf.nn.relu),
    keras.layers.Dense(128, activation=tf.nn.relu),
    keras.layers.Dense(128, activation=tf.nn.relu),
    keras.layers.Dense(128, activation=tf.nn.relu),
    keras.layers.Dense(128, activation=tf.nn.relu),
    keras.layers.Dense(10, activation=tf.nn.softmax)
])

model.summary()

model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=5,batch_size=50)

test_loss, test_acc = model.evaluate(train_images, train_labels)

print('Training accuracy:', test_acc)

from sklearn import metrics

precision = metrics.precision_score(model.predict_classes(test_images),test_labels,average='macro')
recall = metrics.recall_score(model.predict_classes(test_images),test_labels,average='macro')

print(precision)
print(recall)
print(2*precision*recall/(precision+recall))

test_loss, test_acc = model.evaluate(test_images, test_labels)

print('Test accuracy:', test_acc)

fashion_mnist_2d = keras.datasets.fashion_mnist

(x_train, y_train), (x_test,y_test) = fashion_mnist_2d.load_data()

x_train=x_train.reshape(-1,1,28,28)
x_test=x_test.reshape(-1,1,28,28)
x_train=x_train/255.
x_test=x_test/255.

from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D

model1 = Sequential()
model1.add(Conv2D(32,3, data_format="channels_first", input_shape=(1,28,28) ))
model1.add(Activation('relu'))
model1.add(MaxPooling2D(pool_size=(2, 2)))
model1.add(Flatten())
model1.add(Dense(128))
model1.add(Activation('relu'))
model1.add(Dropout(0.5))
model1.add(Dense(10))
model1.add(Activation('softmax'))

model1.summary()

model1.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
#Train_images=np.expand_dims(train_images,axis=1)
model1.fit(x_train, y_train, epochs=5, validation_split=0.2)

test_loss, test_acc = model1.evaluate(x_test, y_test)

print('Test accuracy:', test_acc)

precision = metrics.precision_score(model.predict_classes(test_images),test_labels,average='macro')
recall = metrics.recall_score(model.predict_classes(test_images),test_labels,average='macro')

print(precision)
print(recall)
print(2*precision*recall/(precision+recall))

model2 = Sequential()
model2.add(Conv2D(32,3, data_format="channels_first", input_shape=(1,28,28) ))
model2.add(Activation('relu'))
model2.add(MaxPooling2D(pool_size=(2, 2)))

model2.add(Conv2D(32,3 ))
model2.add(Activation('relu'))
model2.add(MaxPooling2D(pool_size=(2, 2)))

model2.add(Conv2D(32,3 ))
model2.add(Activation('relu'))
model2.add(MaxPooling2D(pool_size=(2, 2)))

model2.add(Flatten())
model2.add(Dense(128))
model2.add(Activation('relu'))
model2.add(Dropout(0.5))
model2.add(Dense(10))
model2.add(Activation('softmax'))

from keras import optimizers

ada = optimizers.Adam(lr=0.05)
model2.compile(optimizer=ada,
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
#Train_images=np.expand_dims(train_images,axis=1)
model2.fit(x_train, y_train, epochs=10, validation_split=0.2,batch_size=10000)

test_loss, test_acc = model2.evaluate(x_test, y_test)

print('Test accuracy:', test_acc)

precision = metrics.precision_score(model.predict_classes(test_images),test_labels,average='macro')
recall = metrics.recall_score(model.predict_classes(test_images),test_labels,average='macro')

print(precision)
print(recall)
print(2*precision*recall/(precision+recall))
